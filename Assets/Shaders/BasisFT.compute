#pragma kernel CSMain
#include "Assets/Shaders/Common/common.hlsl"

Texture2D<float4> noise;
RWTexture2D<float4> result;

float g;
float lx;
int n;
float4 wind_information;
float l;

float phillips(float2 k_hat)
{
    float2 w_hat = normalize(wind_information.xy);
    float k = length(k_hat);
    float V = wind_information.z;
    float A = wind_information.w;
    float L = (V * V) / g;
    float numerator = exp(-1 / pow((k * L), 2));
    float cos_factor = pow(dot(k_hat, w_hat), 2);
    return A * (numerator / pow(k, 4)) * cos_factor * exp(-(k * k * l * l));
}

float2 basis_dft(int n_prime, int m_prime)
{
    float2 ft_noise = noise.Load(int3(n_prime, m_prime, 0)).rg;
    float real_sample = ft_noise.r;
    float imaginary_sample = ft_noise.g;

    return (1 / sqrt(2.0)) * float2(real_sample, imaginary_sample) * sqrt(phillips(wave_vector(n_prime, m_prime, n, n, lx, lx)));
}

[numthreads(8,1,8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    result[id.xz] = float4(basis_dft(id.x, id.z), 0.0, 1.0);
}
